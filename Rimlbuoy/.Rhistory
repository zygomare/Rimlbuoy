height=8,
pointsize=35,
res=300)
print(g1)
dev.off()
res.df.all$bb_555
g2=ggplot(res.df.all)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_412/vik_412,group= res.df.all$dataset,color="412 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_412/vik_412),color="412 nm"),size=2)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_443/vik_443,group= res.df.all$dataset,color="443 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_443/vik_443),color="443 nm"),size=2)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_490/vik_490,group= res.df.all$dataset,color="490 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_490/vik_490),color="490 nm"),size=2)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_510/vik_510,group= res.df.all$dataset,color="510 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_510/vik_510),color="510 nm"),size=2)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_555/vik_555,group= res.df.all$dataset,color="555 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_555/vik_555),color="555 nm"),size=2)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_669/vik_669,group= res.df.all$dataset,color="669 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_669/vik_669),color="669 nm"),size=2)
g2=g2+geom_boxplot(aes(x=datetime,y=bb_683/vik_683,group= res.df.all$dataset,color="683 nm"))
g2=g2+geom_hline(aes(yintercept=mean(bb_683/vik_683),color="683 nm"),size=2)
g2=g2+geom_hline(aes(yintercept=1))
g2=g2+xlab("Date Time")+ylab("Child Lu(0.86m)/Viking Lu(0.86m)")
g2=g2+ylim(0,7)+theme(axis.text=element_text(size=12),
axis.title=element_text(size=16,face="bold"),
legend.text=element_text(size=14),
legend.title=element_text(size=16,face="bold"),
legend.key.size=unit(0.5, "cm"))
#   g1=g1 +scale_colour_manual(name ='',values =c('Blue','Black'), labels = c('Child buoy data','Viking data'))
g2=g2 +scale_colour_manual(name ='Wavelength',
labels = c("412 nm","443 nm","490 nm","510 nm","555 nm","669 nm","683 nm"),
values = cbPalette)
print(g2)
png(filename="Ratio_bb_viking.png",
units="in",
width=12,
height=8,
pointsize=25,
res=300)
print(g2)
dev.off()
paste(path.package("Rimlbuoy"),"/coef.Anap.Rdata",sep="")
library(Rimlbuoy)
library(Rimlbuoy)
get.bandshift.coefficient
library(Rimlbuoy)
pathwd="../Arctus/data/2016/IML-4/"
fnames = list.files(pathwd,full.names = T)
fn=fnames[grep("OPTICD",fnames)]
Tilt_threshold = 10
band.width=rep(10,7)
waves2= c(560,665,681)
band.width2 = rep(10,3)
PI="Simon_Belanger"
PI_Email ="sbe@arctus.ca"
land_dist_IS = 20
PQC = "P000010000"
MQC="M110111001101020200"
write.to.MERMAID(OPTICD_fname=fn[170],outputdir=output_dir_data,Tilt_threshold=Tilt_threshold)
library((Rimlbuoy))
library((Rimlbuoy)
)
library(Rimlbuoy)
write.to.MERMAID(OPTICD_fname=fn,outputdir=output_dir_data,Tilt_threshold=Tilt_threshold)
write.to.MERMAID(OPTICD_fname=fn[170],outputdir=output_dir_data,Tilt_threshold=Tilt_threshold)
fn
write.to.MERMAID(OPTICD_fname=fn[150],outputdir=output_dir_data,Tilt_threshold=Tilt_threshold)
band.width
Extract information from the file name
base = basename(OPTICD_fname)
inpath = dirname(OPTICD_fname)
BuoyID = paste(str_sub(base,1,3),str_sub(base,5,5),sep="")
idexdat= str_sub(base,13,28)
#######
# Skip missing function between R3.02 and R3.03
anyNA <- function(x) any(is.na(x))
#######
# Read file
raw = read.OPTICD(OPTICD_fname)
if (USE.MEDIAN) { # This will allows the possibility to process archived data when MED was not available
OCR_MED_fname = paste(inpath,"/",BuoyID, "_OCR_MED",idexdat,".DAT",sep="")
raw_med = read.OCR_MED(OCR_MED_fname)
}
OPTICD_fname=fn[150]
# Extract information from the file name
base = basename(OPTICD_fname)
inpath = dirname(OPTICD_fname)
BuoyID = paste(str_sub(base,1,3),str_sub(base,5,5),sep="")
idexdat= str_sub(base,13,28)
#######
# Skip missing function between R3.02 and R3.03
anyNA <- function(x) any(is.na(x))
#######
# Read file
raw = read.OPTICD(OPTICD_fname)
USE.MEDIAN=FALSE
USE.BANDSHIFT.COEF=TRUE
if (USE.MEDIAN) { # This will allows the possibility to process archived data when MED was not available
OCR_MED_fname = paste(inpath,"/",BuoyID, "_OCR_MED",idexdat,".DAT",sep="")
raw_med = read.OCR_MED(OCR_MED_fname)
}
######
# Detect if buoy coordinate is present if not define coordinate
#####
if (is.na(as.numeric(raw$lat))){
if (BuoyID == "IML4"){
raw$lat= rep(convert_str_coord("48° 40.002' N"),length(raw$DOY))
raw$lon = rep(convert_str_coord("68° 34.998' O"),length(raw$DOY))
}else if(BuoyID == "IML6"){
raw$lat = rep(convert_str_coord("47° 46.998' N"),length(raw$DOY))
raw$lon = rep(convert_str_coord("64° 1.998' O"),length(raw$DOY))
}else if(BuoyID == "IML10"){
raw$lat= rep(convert_str_coord("48° 0' N"),length(raw$DOY))
raw$lon= rep(convert_str_coord("60° 30' O"),length(raw$DOY))
}
} else {
# SB: Il faudrait en mettre plus des print() et les sauvegarder dans un fichier .log
# a faire
print("GPS OK")
}
#same for med
if (USE.MEDIAN) { # This will allows the possibility to process archived data when MED was not available
if (is.na(as.numeric(raw$lat))){
if (BuoyID == "IML4"){
raw$lat= raw_med$lat = rep(convert_str_coord("48° 40.002' N"),length(raw$DOY))
raw$lon =  raw_med$lon = rep(convert_str_coord("68° 34.998' O"),length(raw$DOY))
}else if(BuoyID == "IML6"){
raw$lat= raw_med$lat = rep(convert_str_coord("47° 46.998' N"),length(raw$DOY))
raw$lon = raw_med$lon = rep(convert_str_coord("64° 1.998' O"),length(raw$DOY))
}else if(BuoyID == "IML10"){
raw$lat= raw_med$lat = rep(convert_str_coord("48° 0' N"),length(raw$DOY))
raw$lon = raw_med$lon = rep(convert_str_coord("60° 30' O"),length(raw$DOY))
}
} else {
# SB: Il faudrait en mettre plus des print() et les sauvegarder dans un fichier .log
# a faire
print("GPS OK")
}
}
#####
# Find the index falling within the two hours of solar noon
#####
GMT_noon =  as.POSIXct(paste(strftime(raw$DateTime, format = "%Y-%m-%d")[1],"12:00:00", sep = " "),
format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
diff.GMT.noon.in.sec <- mean(raw$lon, na.rm = T)/360*24 * 3600
solar.noon.time = GMT_noon - diff.GMT.noon.in.sec
# get the first and last indices retained for the processing
First_time = abs(difftime(solar.noon.time - 7200, raw$DateTime))
First_time_ix = which.min(First_time)
Last_time = abs(difftime(solar.noon.time + 7200, raw$DateTime))
Last_time_ix = which.min(Last_time)
# Create a vector of good indices
ix.good = First_time_ix:Last_time_ix
ngood = length(ix.good)
#####
# Find the index falling within the one hours of local midnight
#####
GMT_midnight =  as.POSIXct(paste(strftime(raw$DateTime, format = "%Y-%m-%d")[1],"04:00:00", sep = " "),
format = "%Y-%m-%d %H:%M:%S", tz = "GMT")
# get the first and last indices retained for the processing
First_time_night = abs(difftime(GMT_midnight - 3600, raw$DateTime))
First_time_ix_night = which.min(First_time_night)
Last_time_night = abs(difftime(GMT_midnight + 3600, raw$DateTime))
Last_time_ix_night = which.min(Last_time_night)
# Create a vector of good indices
ix.good_night= First_time_ix_night:Last_time_ix_night
ngood_night = length(ix.good_night)
#####
#Make Dark readings
####
if (USE.MEDIAN) {
dark.read.med.Lu=apply(raw_med$Lu0.86m[ix.good_night,],2,median,na.rm=T)
}else{
dark.read.Lu=apply(raw$Lu0.86m[ix.good_night,],2,median,na.rm=T)
}
###
#Make Dark correction
####
if (USE.MEDIAN) {
dark.med.Lu=raw_med$Lu0.86m[i,]-dark.read.med.Lu
}else{
dark.Lu=raw$Lu0.86m-dark.read.Lu
}
###
# Create matrices or vectors to store the data
rho_wn = matrix(NA, ncol=7, nrow=ngood)
sunzen = rep(NA, ngood)
nLw = matrix(NA, ncol=7, nrow=ngood)
# Loop on each record between solar noon +/- 2 hours
igood.rec = 0
for (i in ix.good){
igood.rec <- igood.rec + 1 # this in crement is needed to write in the new matrices and vectors
print(paste("Process :", raw$DateTime[i]))
# check if the curent record is complete
if (USE.MEDIAN) {
complete = (!anyNA(raw_med$Ed0p[i,]) & !anyNA(raw_med$Lu0.86m[i,]))
}
else complete = (!anyNA(raw$Ed0p[i,]) & !anyNA(raw$Lu0.86m[i,]))
if (complete) {
if (USE.MEDIAN) {
res = compute.Rrs.from.buoy(raw$waves,
raw_med$Ed0p[i,],
dark.med.Lu[i,],
raw$DateTime[i],
raw$lon[i],
raw$lat[i])
} else res = compute.Rrs.from.buoy(raw$waves,
raw$Ed0p[i,],
dark.Lu[i,],
raw$DateTime[i],
raw$lon[i],
raw$lat[i])
rho_wn[igood.rec, ] <- res$rho_wn
nLw[igood.rec, ] <- res$nLw
sunzen[igood.rec] <- res$sunzen
######Make bandshift correction
if (USE.BANDSHIFT.COEF) {
bandshift.fact=unlist(lapply(get.bandshift.coefficient(res$Rrs,raw$waves,band.width,waves2,band.width2),mean,na.rm=T))
for (i in c(1:length(bandshift.fact))){
ix.wl=which.min(abs(as.numeric(names(bandshift.fact)[i])-as.numeric(names(res$rho_wn))))
ix.wl.thullier=which.min(abs(as.numeric(names(bandshift.fact)[i])-thuillier.completed.by.AM0AM1$wave))
ix.wl0.thullier=which.min(abs(as.numeric(names(res$rho_wn)[ix.wl])-thuillier.completed.by.AM0AM1$wave))
ratio.thuillier=(thuillier.completed.by.AM0AM1$F0[ix.wl.thullier]/thuillier.completed.by.AM0AM1$F0[ix.wl0.thullier])
rho_wn[igood.rec, ix.wl]=rho_wn[igood.rec,ix.wl]*bandshift.fact[i]
nLw[igood.rec,ix.wl ]=nLw[igood.rec, ix.wl]*ratio.thuillier*bandshift.fact[i]
}
}else{
print("DO NOT apply bandshift coefficient")
}
} else { # If it is not complete the variable will take NA values
# The processing will continue with no error
print("Some data is missing")
print(raw$Ed0p[i,])
print(raw$Lu0.86m[i,])
}
}
band.width
waves2
band.width2
source('~/MEGA/Arctus/Rcode/Write_iml4data.R', echo=TRUE)
325*4
source('~/MEGA/Arctus/Rcode/Write_iml4data.R', echo=TRUE)
source('~/MEGA/Arctus/Rcode/Write_iml6data.R', echo=TRUE)
source('~/MEGA/Arctus/Rcode/Write_iml6data.R', echo=TRUE)
# TODO: Calcul aDissous(lambda)
#
# Author: thomas
###############################################################################
library(nlme)
library(MASS)
###############################################################################
#assemblage de tables
###############################################################################
appendDatarow <- function(dataRow,dataFrame, index) {
dataFrame[index,] = dataRow
return(dataFrame)
}
appendDatacol <- function(datacol,dataFrame, index) {
dataFrame[,index] = datacol
return(dataFrame)
}
appendtotable = function(datacol,dataFrame,index,Bycol,Byrow){
if (Bycol == T){
data_table=appendDatacol(datacol,dataFrame, index)
}
if (Byrow == T){
data_table=appendDatarow(datacol,dataFrame, index)
}
}
###############################################################################
#Lecture fichiers
###############################################################################
OD_bs = function (fichiereaupure){
a = read.table(fichiereaupure, sep=",",header=T)
row.names(a)=a$nm
a = a[order(a$nm),]
a
}
lecture_abs = function (fichierabsorption){
a = read.table(fichierabsorption, sep=",",header=T)
row.names(a)=a$nm
a = a[order(a$nm),]
abs=list(data=a$A,wl=a$nm)
}
###############################################################################
#function de conversion Absorbance/absorption
###############################################################################
Ag_lambda <- function(fichierabsorption,chemin_optique){
data = lecture_abs(fichierabsorption)
nm690= which(data$wl == 690)
nm700= which(data$wl == 700)
offset= median(c(data$data[nm690],data$data[nm700]))
Coeff = (2.303/chemin_optique)*(data$data-offset)
Ag = list(wave = data$wl, Coeff = Coeff,offset =offset,absorbance=data$data)
return(Ag)
}
###############################################################################
#function de calcule de la pente entre les longueur d'onde désirées
###############################################################################
Slope <- function(fichierabsorption,chemin_optique,long_onde_1,long_onde_2){
data = Ag_lambda(fichierabsorption,chemin_optique)
loga = log(data$Coeff)
tab = data.frame(data$wave,loga)
x=c(long_onde_1:long_onde_2)
wave1 = which(tab$data.wave == long_onde_1)
wave2 = which(tab$data.wave == long_onde_2)
#plot(tab)
lmfit = lm(tab[wave1:wave2,2]~x)
Slope = coef(lmfit)[2]
#plot(tab)
#abline(lmfit)
return(Slope)
}
###############################################################################
#function de calcule de la pente entre les longueur d'onde désirées
###############################################################################
Slope_right <- function(fichierabsorption,chemin_optique,long_onde_1,long_onde_2){
data = Ag_lambda(fichierabsorption,chemin_optique)
#loga = log(data$Coeff)
#tab = data(data$wave,loga)
x=c(long_onde_1:long_onde_2)
wave1 = which(data$wave == long_onde_1)
wave2 = which(data$wave== long_onde_2)
Slope = log(data$Coeff[wave1]/data$Coeff[wave2])/length(x)
return(Slope)
}
###############################################################################
#function pour appliquer toutes les autres fonctions au dossier desire
###############################################################################
processDir_for_acdom_calculation = function(dir_abs,chemin_optique,first_wl,last_wl,interval,long_onde_1,long_onde_2,long_onde_3,long_onde_4) {
children = list.files(dir_abs,full.names=F,recursive=T)
print(length(children))
nbre_ligne=seq(first_wl,last_wl,interval)
valeurs_abs = matrix(data=,ncol=length(children),nrow=length(nbre_ligne))
valeurs_Slope = matrix(data=,ncol=1,nrow=length(children))
valeurs_Sr = matrix(data=,ncol=1,nrow=length(children))
valeurs_Slope2 = matrix(data=,ncol=1,nrow=length(children))
valeurs_A254 = matrix(data=,ncol=1,nrow=length(children))
valeurs_Slope3 = matrix(data=,ncol=1,nrow=length(children))
valeurs_Slope4 = matrix(data=,ncol=1,nrow=length(children))
name = matrix(data=,ncol=1,nrow=length(children))
for(i in 1:length(children)) {
print(children[i])
Abs = Ag_lambda(paste(dir_abs,"/",children[i],sep=""),chemin_optique)
Slope =Slope(paste(dir_abs,"/",children[i],sep=""),chemin_optique,long_onde_1,long_onde_2)
Slope2 =Slope(paste(dir_abs,"/",children[i],sep=""),chemin_optique,long_onde_3,long_onde_4)
Slope3 =Slope_right(paste(dir_abs,"/",children[i],sep=""),chemin_optique,long_onde_1,long_onde_2)
Slope4=Slope_right(paste(dir_abs,"/",children[i],sep=""),chemin_optique,long_onde_3,long_onde_4)
wl254 = which(Abs$wave==254)
wlLong1 = which(Abs$wave==long_onde_1)
wlLong2 = which(Abs$wave==long_onde_2)
wlLong3 = which(Abs$wave==long_onde_3)
wLLong4 = which(Abs$wave==long_onde_4)
valeurs_Slope= appendDatarow(Slope,valeurs_Slope,i)
valeurs_Slope2= appendDatarow(Slope2,valeurs_Slope2,i)
valeurs_Slope3= appendDatarow(Slope3,valeurs_Slope3,i)
valeurs_Slope4= appendDatarow(Slope4,valeurs_Slope4,i)
valeurs_Sr= appendDatarow(c(Slope3/Slope4),valeurs_Sr,i)
valeurs_A254= appendDatarow(Abs$absorbance[wl254],valeurs_A254,i)
valeurs_abs = appendDatacol(Abs$Coeff,valeurs_abs,i)
name=appendDatarow(children[i],name,i)
}
donnee_labo = list(data=valeurs_abs,wl=Abs$wave,station=c(name),Slope_at_275=valeurs_Slope,slope_350=valeurs_Slope2,Slope_right_275=valeurs_Slope3,slope_right_350=valeurs_Slope4,Sratio=valeurs_Sr,Absorbance_254=valeurs_A254)
data = matrix(donnee_labo$data,nrow=length(nbre_ligne),ncol=length(children))
colnames(data)=donnee_labo$station
row.names(data)=donnee_labo$wl
write.csv( data,"data.csv",sep=",")
DATA_optique=matrix(c(donnee_labo$Sratio,donnee_labo$Absorbance_254),nrow=length(children),ncol=2)
colnames(DATA_optique)=c("Sr","Absorbance_254 nm")
row.names(DATA_optique)=donnee_labo$station
write.csv( DATA_optique,"data_optique.csv",sep=",")
return(donnee_labo )
}
setwd("/home/thomas/Documents/")
library("Rimlbuoy")
library("ggplot2")
setwd("~/MEGA/Arctus/data/")
pathwd = "~/MEGA/Arctus/data/2016/output/IML4/"
source("~/MEGA/Arctus/project/S3calval/read.pix_Extract_S3.R")
# filen=("Matchup/pixExIML4_20160523_S3A_OL_2_WFR_measurements.txt")
filen=("Matchup/Pix_extract_S3_30072016.txt")
# filen=("Matchup/Pix_extract_S3_31072016.txt")
# filen=("Matchup/Pix_extract_S3_01082016.txt")
S3_data = read.pix_Extract_S3(filen)
date_time_im= as.POSIXct(paste(S3_data$data$V8, S3_data$data$V9), format = "%Y-%m-%d %H:%M:%S",
tz = "GMT")
rrs_data=list.files(pathwd)
id_files=grep( strftime(date_time_im,"%Y%m%d")[1],rrs_data)
raw = read.table(paste(pathwd,rrs_data[id_files],sep=""),sep = ";",header = T)
test_time_matchup =  abs(difftime(strftime(date_time_im,"%Y-%m-%d %H:%M:%S","GMT")[1], as.POSIXct(raw$TIME_IS, format="%Y%m%dT%H%M%SZ"), units="secs"))
test_time_matchup_ix = which.min(test_time_matchup)
timeseq= c((test_time_matchup_ix-0):(test_time_matchup_ix+0))
test_tab = matrix(NA,ncol=2,nrow=16)
z=1
for (i in c(seq(10,40,2))){
test_tab[z,1]=tail(levels(S3_data$data[1,i]),n=1)
test_tab[z,2]= as.numeric(median(as.numeric(paste(S3_data$data[c(3:11),i])),na.rm = T))
z=z+1
}
rhown_buoy=raw[test_time_matchup_ix,c(26:32)]
library("lmodel2")
#test_tab_buoy[which(test_tab_buoy<0)]=NA
med_rrs_matchup=apply(rhown_buoy,2,median,na.rm=T)
S3_DATA=as.numeric(test_tab[c(2:6,9,10),2])
comp_rrs=data.frame(S3_DATA,med_rrs_matchup)
colnames(comp_rrs)=c("S3_data_01082016","Buoy data_01082016")
plot(comp_rrs[,1],comp_rrs[,2])
abline(0,1)
test_lm2=lmodel2(comp_rrs[,2]~comp_rrs[,1])
plot(test_lm2,xlab="rrs S3",ylab="rrs buoy")
abline(0,1)
Matchup=cbind(unique(S3_data$wave[10:41]),as.numeric(test_tab[,2]))
rrs_matchup=matrix(c(412,443,490,510,550,670,683,med_rrs_matchup),ncol=2,nrow=7)
total_data=rbind(rrs_matchup,Matchup)
total_df=data.frame(total_data)
total_df$dataset <- c(rep("A", nrow(rrs_matchup)), rep("B", nrow(test_tab)))
#########prob de format de données à determiner
p=ggplot(data=total_df,aes(x=total_df[,1],y=total_df[,2],colour=dataset))+
geom_line()+geom_point()+ scale_colour_grey(start = 0, end = .5,labels=c("Buoy data","S3 data"),name="") +theme_bw()+
scale_x_continuous(limits = c(400, 750))+
ylab("Rrs") +xlab("Wavelength") + annotate("text", x = 600, y = 0.02, label = strftime(date_time_im,"%Y-%m-%d %H:%M:%S","GMT")[1])
print(p)
filen=("Matchup/Pix_extract_S3_31072016.txt")
# filen=("Matchup/Pix_extract_S3_01082016.txt")
S3_data = read.pix_Extract_S3(filen)
date_time_im= as.POSIXct(paste(S3_data$data$V8, S3_data$data$V9), format = "%Y-%m-%d %H:%M:%S",
tz = "GMT")
rrs_data=list.files(pathwd)
id_files=grep( strftime(date_time_im,"%Y%m%d")[1],rrs_data)
raw = read.table(paste(pathwd,rrs_data[id_files],sep=""),sep = ";",header = T)
test_time_matchup =  abs(difftime(strftime(date_time_im,"%Y-%m-%d %H:%M:%S","GMT")[1], as.POSIXct(raw$TIME_IS, format="%Y%m%dT%H%M%SZ"), units="secs"))
test_time_matchup_ix = which.min(test_time_matchup)
timeseq= c((test_time_matchup_ix-0):(test_time_matchup_ix+0))
test_tab = matrix(NA,ncol=2,nrow=16)
z=1
for (i in c(seq(10,40,2))){
test_tab[z,1]=tail(levels(S3_data$data[1,i]),n=1)
test_tab[z,2]= as.numeric(median(as.numeric(paste(S3_data$data[c(3:11),i])),na.rm = T))
z=z+1
}
rhown_buoy=raw[test_time_matchup_ix,c(26:32)]
library("lmodel2")
#test_tab_buoy[which(test_tab_buoy<0)]=NA
med_rrs_matchup=apply(rhown_buoy,2,median,na.rm=T)
S3_DATA=as.numeric(test_tab[c(2:6,9,10),2])
comp_rrs=data.frame(S3_DATA,med_rrs_matchup)
colnames(comp_rrs)=c("S3_data_01082016","Buoy data_01082016")
plot(comp_rrs[,1],comp_rrs[,2])
abline(0,1)
test_lm2=lmodel2(comp_rrs[,2]~comp_rrs[,1])
plot(test_lm2,xlab="rrs S3",ylab="rrs buoy")
abline(0,1)
Matchup=cbind(unique(S3_data$wave[10:41]),as.numeric(test_tab[,2]))
rrs_matchup=matrix(c(412,443,490,510,550,670,683,med_rrs_matchup),ncol=2,nrow=7)
total_data=rbind(rrs_matchup,Matchup)
total_df=data.frame(total_data)
total_df$dataset <- c(rep("A", nrow(rrs_matchup)), rep("B", nrow(test_tab)))
#########prob de format de données à determiner
p=ggplot(data=total_df,aes(x=total_df[,1],y=total_df[,2],colour=dataset))+
geom_line()+geom_point()+ scale_colour_grey(start = 0, end = .5,labels=c("Buoy data","S3 data"),name="") +theme_bw()+
scale_x_continuous(limits = c(400, 750))+
ylab("Rrs") +xlab("Wavelength") + annotate("text", x = 600, y = 0.02, label = strftime(date_time_im,"%Y-%m-%d %H:%M:%S","GMT")[1])
print(p)
rrs_data
id_files=grep( strftime(date_time_im,"%Y%m%d")[1],rrs_data)
raw = read.table(paste(pathwd,rrs_data[id_files],sep=""),sep = ";",header = T)
raw
test_time_matchup =  abs(difftime(strftime(date_time_im,"%Y-%m-%d %H:%M:%S","GMT")[1], as.POSIXct(raw$TIME_IS, format="%Y%m%dT%H%M%SZ"), units="secs"))
test_time_matchup_ix = which.min(test_time_matchup)
timeseq= c((test_time_matchup_ix-0):(test_time_matchup_ix+0))
test_tab = matrix(NA,ncol=2,nrow=16)
z=1
for (i in c(seq(10,40,2))){
test_tab[z,1]=tail(levels(S3_data$data[1,i]),n=1)
test_tab[z,2]= as.numeric(median(as.numeric(paste(S3_data$data[c(3:11),i])),na.rm = T))
z=z+1
}
rhown_buoy=raw[test_time_matchup_ix,c(26:32)]
rhown_buoy
rhown_buoy
S3_DATA=as.numeric(test_tab[c(2:6,9,10),2])
S3_DATA
test_tab
Matchup
library("lmodel2")
#test_tab_buoy[which(test_tab_buoy<0)]=NA
med_rrs_matchup=apply(rhown_buoy,2,median,na.rm=T)
S3_DATA=as.numeric(test_tab[c(2:6,9,10),2])
comp_rrs=data.frame(S3_DATA,med_rrs_matchup)
colnames(comp_rrs)=c("S3_data_01082016","Buoy data_01082016")
plot(comp_rrs[,1],comp_rrs[,2])
abline(0,1)
test_lm2=lmodel2(comp_rrs[,2]~comp_rrs[,1])
plot(test_lm2,xlab="rrs S3",ylab="rrs buoy")
abline(0,1)
Matchup=cbind(unique(S3_data$wave[10:41]),as.numeric(test_tab[,2]))
Matchup
rhown_buoy
rrs_matchup=matrix(c(412,443,490,510,560,665,681,med_rrs_matchup),ncol=2,nrow=7)
total_data=rbind(rrs_matchup,Matchup)
Matchup=cbind(unique(S3_data$wave[10:41]),as.numeric(test_tab[,2]))
rrs_matchup=matrix(c(412,443,490,510,560,665,681,med_rrs_matchup),ncol=2,nrow=7)
total_data=rbind(rrs_matchup,Matchup)
total_df=data.frame(total_data)
total_df$dataset <- c(rep("A", nrow(rrs_matchup)), rep("B", nrow(test_tab)))
#########prob de format de données à determiner
p=ggplot(data=total_df,aes(x=total_df[,1],y=total_df[,2],colour=dataset))+
geom_line()+geom_point()+ scale_colour_grey(start = 0, end = .5,labels=c("Buoy data","S3 data"),name="") +theme_bw()+
scale_x_continuous(limits = c(400, 750))+
ylab("Rrs") +xlab("Wavelength") + annotate("text", x = 600, y = 0.02, label = strftime(date_time_im,"%Y-%m-%d %H:%M:%S","GMT")[1])
print(p)
source('~/MEGA/Arctus/Rcode/test_pix_extract_S3.R', echo=TRUE)
